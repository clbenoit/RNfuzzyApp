group <- data.frame(groups, name, row.names = rep)
data <- t(data_o[apply(data_o, 1, var) != 0, ])
data.pca.all <- prcomp(data,center = T,scale. = T)
data <- data.frame(data.pca.all$x)
data['name'] <- name
data <- left_join(x = data, y = group, by = "name")
plot_ly(
data = data,
x =~PC1,
y = ~PC2,
color = ~factor(groups),
text = ~name,
textposition = "top right",
type = "scatter",
mode = "markers+text"
)
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
shiny::runApp('Desktop/RNApp/App')
?BiocManafze::install
?BiocManager::install
install.packages(c("broom", "cli", "dbplyr", "gh", "packrat", "pkgload", "processx", "remotes", "tinytex"))
install.packages(c("broom", "cli", "dbplyr", "gh", "packrat", "pkgload", "processx", "remotes", "tinytex"))
install.packages(c("broom", "cli", "dbplyr", "gh", "packrat", "pkgload", "processx", "remotes", "tinytex"))
install.packages(c("broom", "cli", "dbplyr", "gh", "packrat", "pkgload", "processx", "remotes", "tinytex"))
install.packages(c("broom", "cli", "dbplyr", "gh", "packrat", "pkgload", "processx", "remotes", "tinytex"))
install.packages(c("broom", "cli", "dbplyr", "gh", "packrat", "pkgload", "processx", "remotes", "tinytex"))
install.packages(c("broom", "cli", "dbplyr", "gh", "packrat", "pkgload", "processx", "remotes", "tinytex"))
install.packages(c("broom", "cli", "dbplyr", "gh", "packrat", "pkgload", "processx", "remotes", "tinytex"))
install.packages(c("broom", "cli", "dbplyr", "gh", "packrat", "pkgload", "processx", "remotes", "tinytex"))
install.packages(c("broom", "cli", "dbplyr", "gh", "packrat", "pkgload", "processx", "remotes", "tinytex"))
install.packages(c("broom", "cli", "dbplyr", "gh", "packrat", "pkgload", "processx", "remotes", "tinytex"))
install.packages(c("broom", "cli", "dbplyr", "gh", "packrat", "pkgload", "processx", "remotes", "tinytex"))
install.packages(c("broom", "cli", "dbplyr", "gh", "packrat", "pkgload", "processx", "remotes", "tinytex"))
install.packages(c("broom", "cli", "dbplyr", "gh", "packrat", "pkgload", "processx", "remotes", "tinytex"))
install.packages(c("broom", "cli", "dbplyr", "gh", "packrat", "pkgload", "processx", "remotes", "tinytex"))
install.packages(c("broom", "cli", "dbplyr", "gh", "packrat", "pkgload", "processx", "remotes", "tinytex"))
install.packages(c("broom", "cli", "dbplyr", "gh", "packrat", "pkgload", "processx", "remotes", "tinytex"))
install.packages(c("broom", "cli", "dbplyr", "gh", "packrat", "pkgload", "processx", "remotes", "tinytex"))
install.packages(c("broom", "cli", "dbplyr", "gh", "packrat", "pkgload", "processx", "remotes", "tinytex"))
shiny::runApp('Desktop/RNApp/App')
?sapply
shiny::runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
?ifelse
?if
()
?if
))
?else
runApp('Desktop/RNApp/App')
runApp()
runApp('Desktop/RNApp/App')
shiny::runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
shiny::runApp('Desktop/RNApp/App')
runApp()
runApp('Desktop/RNApp/App')
BiocManager::install("Diffbind")
BiocManager::install("DiffBind")
library(DiffBind)
shiny::runApp('Desktop/RNApp/App')
runApp()
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
shiny::runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
install.packages(c("bitops", "brio", "cli", "haven", "httpuv", "jquerylib", "knitr", "later", "RSQLite", "scatterpie", "shadowtext", "shinydashboardPlus", "survival", "V8"))
install.packages(c("bitops", "brio", "cli", "haven", "httpuv", "jquerylib", "knitr", "later", "RSQLite", "scatterpie", "shadowtext", "shinydashboardPlus", "survival", "V8"))
install.packages(c("bitops", "brio", "cli", "haven", "httpuv", "jquerylib", "knitr", "later", "RSQLite", "scatterpie", "shadowtext", "shinydashboardPlus", "survival", "V8"))
install.packages(c("bitops", "brio", "cli", "haven", "httpuv", "jquerylib", "knitr", "later", "RSQLite", "scatterpie", "shadowtext", "shinydashboardPlus", "survival", "V8"))
shiny::runApp('Desktop/RNApp/App')
runApp()
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
?freadf
?fread
counts_matrix<- data.frame(read.csv(file.choose()), row.names = 1) #select the mean file
counts_matrix
counts_matrix<- data.frame(fread(file.choose()), row.names = 1)
counts_matrix
group <- read.csv(fread(file.choose(), header = FALSE),header = T)
group <- read.csv(fread(file.choose(), header = FALSE),header = T)
group <- read.csv(fread(file.choose(), header = FALSE),row.names = 1)
counts_matrix<- data.frame(fread(file.choose()), row.names = 1)
counts_matrix<- data.frame(fread(file.choose()), row.names = 1)
group <- data.frame(fread(file.choose(), header = FALSE),row.names = 1)
group
group <- data.frame(fread(file.choose(), header = FALSE),row.names = 1)
group
groupList <-
lapply(unique(group$V2), function(x) {
group[group$V2 == x, ]$V1
})
groupd <- as.data.frame(group)
rep <- groupd$V1
group <- groupd$V2
groupdf <- data.frame(group, row.names = rep)
design <- formula(as.formula(paste("~", paste(colnames(as.data.frame(group)), collapse = "+"))))
dds <- DESeqDataSetFromMatrix(counts_matrix, colData=vgroupdf, design=design)
dds <- DESeqDataSetFromMatrix(counts_matrix, colData=groupdf, design=design)
groupdf
counts_matrix
group <- data.frame(fread(file.choose(), header = T),row.names = 1)
groupd <- as.data.frame(group)
rep <- groupd$V1
group <- groupd$V2
groupdf <- data.frame(group, row.names = rep)
design <- formula(as.formula(paste("~", paste(colnames(as.data.frame(group)), collapse = "+"))))
groupdf
group <- data.frame(fread(file.choose(), header = FALSE),row.names = 1)
groupd <- as.data.frame(group)
rep <- groupd$V1
group <- groupd$V2
groupdf <- data.frame(group, row.names = rep)
design <- formula(as.formula(paste("~", paste(colnames(as.data.frame(group)), collapse = "+"))))
groupdf
groupdf <- groupdf[-1,]
groupdf
group <- data.frame(fread(file.choose(), header = FALSE),row.names = 1)
groupd <- as.data.frame(group)
rep <- groupd$V1
group <- groupd$V2
groupdf <- data.frame(group, row.names = rep)
groupdf <- groupdf[,-1]
design <- formula(as.formula(paste("~", paste(colnames(as.data.frame(group)), collapse = "+"))))
groupdf
group <- data.frame(fread(file.choose(), header = FALSE),row.names = 1)
groupd <- as.data.frame(group)
rep <- groupd$V1
group <- groupd$V2
groupdf <- data.frame(group, row.names = rep)
design <- formula(as.formula(paste("~", paste(colnames(as.data.frame(group)), collapse = "+"))))
groupdf
group <- data.frame(fread(file.choose(), header = FALSE),row.names = 1)
groupd <- as.data.frame(group)
rep <- groupd$V1
group <- groupd$V2
groupdf <- data.frame(group, row.names = rep)
design <- formula(as.formula(paste("~", paste(colnames(as.data.frame(group)), collapse = "+"))))
groupdf
dds <- DESeqDataSetFromMatrix(counts_matrix, colData=groupdf, design=design)
dds <- DESeq(dds)
result <- results(dds)
result
group
groupss <- data.frame(fread(file.choose(), header = FALSE),row.names = 1)
groupss
groupList <-  # set the groups
lapply(unique(group), function(x) {
groupss[group == x, ]$rep
})
result
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
result
?p.adjust
result_mat <- as.matrix(var$result)
result_mat <- as.matrix(result)
reesult_mat
result_mat
p <- result_mat["pvalue"]
p
p <- result_mat$pvalue
p <- result_mat[5,]
p
p <- result_mat[,5]
p
p <- as.data.frame(result_mat[,5])
p
names(p) <- "pvalue"
p
head(p)
p$padj <- p.adjust(p$pvalue, 'fdr')
p
p$padj <- p.adjust(p$pvalue, 'hommel')
p
p$padj <- p.adjust(p$pvalue, 'hommel')
p$padj <- p.adjust(p$pvalue, 'bonferroni')
p
p$padj <- p.adjust(p$pvalue, 'holm')
p
p$padj <- p.adjust(p$pvalue, 'fdr')
p
result <- results(dds,pAdjustMethod = "fdr")
results
result <- results(dds, pAdjustMethod = "fdr")
result
result <- results(dds, pAdjustMethod = "BH")
result
result <- results(dds, pAdjustMethod = "holm")
result
result <- results(dds, pAdjustMethod = "fdr")
result
colData(dds)
head(groupdf)
desing
design
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp()
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
View(result_mat)
View(result_mat)
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
shiny::runApp('Desktop/RNApp/App')
runApp()
runApp()
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
shiny::runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
?mfuzz
v <- 1:12 # initialization of a vector
v+2 # add 2 to each element of v
v * -12:-1 # product element by element
v + 1:3 # the shortest vector is recycled
v
( m <- matrix(v, nrow = 3, ncol = 4) )
c()
a = 5:8
b = c(5:8)
?plot.ts
plot.ts(c(5,3,7,8,3))
plot.ts(5,3,7,8,3)
?plot.ts
paste(1:4)
paste("xyz", 1:10, sep = "") # what is the difference?
paste("xyz", c(2,5,7, "test", 4.5))
?overlap.plot
data <- data.frame(fread(file.choose()), row.names = 1)
shiny::runApp('Desktop/RNApp/App')
data <- data.frame(fread(file.choose()), row.names = 1)
data <- data.frame(fread(file.choose()), row.names = 1)
data
data <- data[order(data[,2]),]
data
write.csv(data, "~/Desktop/clsuters_heat.csv", sep = "\t")
rownames(data) <- data[,1]
data
write.csv(data, "~/Desktop/clsuters_heat.csv", sep = "\t")
data <- data[,-1]
data
write.csv(data, "~/Desktop/clsuters_heat.csv", sep = "\t")
runApp('Desktop/RNApp/App')
res_enrich <- data.frame(fread(file.choose()), row.names = 1)
plot_ly(
res_enrich,
x = ~p_value,
y = ~term_name,
type = "bar",
color = ~factor(source))
res_enrich
plot_ly(
res_enrich,
x = ~P.Value,
y = ~Term_name,
type = "bar",
color = ~factor((source)Enrichment))
plot_ly(
res_enrich,
x = ~P.Value,
y = ~Term_name,
type = "bar",
color = ~factor(Enrichment))
plot_ly(
res_enrich,
x = ~P.Value,
y = ~Term_name,
type = "bar")
plot_ly(
res_enrich,
x = ~(-log10(P.Value)),
y = ~Term_name,
type = "bar")
res_enrich <- res_enrich[1:10,]
plot_ly(
res_enrich,
x = ~(-log10(P.Value)),
y = ~Term_name,
type = "bar")
res_enrich <- data.frame(fread(file.choose()), row.names = 1)
res_enrich <- res_enrich[order(res_enrich[,2]),]
res_enrich <- res_enrich[1:10,]
plot_ly(
res_enrich,
x = ~(-log10(P.Value)),
y = ~Term_name,
type = "bar")
res_enrich
data <- data.frame(fread(file.choose()), row.names = 1)
data <- data[order(data[,1]),]
rownames(data) <- data[,1]
res_enrich <- data.frame(fread(file.choose()), row.names = 1)
res_enrich <- res_enrich[order(res_enrich[,2]),]
res_enrich <- res_enrich[1:10,]
plot_ly(
res_enrich,
x = ~(-log10(P.Value)),
y = ~Term_name,
type = "bar")
res_enrich <- data.frame(fread(file.choose()), row.names = 1)
res_enrich <- res_enrich[order(res_enrich[,1]),]
res_enrich <- res_enrich[1:10,]
plot_ly(
res_enrich,
x = ~(-log10(P.Value)),
y = ~Term_name,
type = "bar")
res_enrich
?plot_ly
res_enrich <- data.frame(fread(file.choose()), row.names = 1)
res_enrich <- res_enrich[order(res_enrich[,1]),]
res_enrich <- data.frame(fread(file.choose()), row.names = 1)
res_enrich <- res_enrich[1:10,]
plot_ly(
res_enrich,
x = ~(-log10(P.Value)),
y = ~Term_name,
type = "bar"
)
res_enrich <- data.frame(fread(file.choose()), row.names = 1)
res_enrich <- res_enrich[order(res_enrich[,1]),]
res_enrich <- res_enrich[1:10,]
plot_ly(
res_enrich,
x = ~(-log10(P.Value)),
y = ~Term_name,
type = "bar"
)
plot_ly(
res_enrich,
x = ~-log10(P.Value),
y = ~Term_name,
type = "bar"
)
res_enrich <- data.frame(fread(file.choose()), row.names = 1)
res_enrich <- data.frame(fread(file.choose()), row.names = 1)
res_enrich <- res_enrich[order(res_enrich[,1]),]
res_enrich
plot_ly(
res_enrich,
x = ~-log10(P.Value),
y = ~Term_name,
type = "bar"
)
res_enrich <- data.frame(fread(file.choose()), row.names = 1)
res_enrich <- res_enrich[order(res_enrich[,1]),]
res_enrich <- res_enrich[1:10,]
plot_ly(
res_enrich,
x = ~-log10(P.Value),
y = ~Term_name,
type = "bar"
)
res_enrich <- data.frame(fread(file.choose()), row.names = 1)
res_enrich <- res_enrich[order(res_enrich[,1]),]
res_enrich <- res_enrich[1:10,]
plot_ly(
res_enrich,
x = ~-log10(P.Value),
y = ~Term_name,
type = "bar"
)
res_enrich <- data.frame(fread(file.choose()), row.names = 1)
res_enrich <- res_enrich[order(res_enrich[,1]),]
res_enrich <- res_enrich[1:10,]
plot_ly(
res_enrich,
x = ~-log10(P.Value),
y = ~Term_name,
type = "bar"
)
res_enrich <- data.frame(fread(file.choose()), row.names = 1)
res_enrich <- res_enrich[order(res_enrich[,1]),]
res_enrich <- res_enrich[1:10,]
plot_ly(
res_enrich,
x = ~-log10(P.Value),
y = ~Term_name,
type = "bar"
)
shiny::runApp('Desktop/RNApp/App')
runApp()
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
data <- data.frame(fread(file.choose()), row.names = 1)
data <- data[order(data[,2]),]
rownames(data) <- data[,1]
data <- data[,-1]
write.csv(data, "~/Desktop/minus_12_m2/clusters_heat.csv", sep = "\t")
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
shiny::runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
shiny::runApp('Desktop/RNApp/App')
runApp()
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
data <- data.frame(fread(file.choose()), row.names = 1)
data <- data.frame(1 - cor(data, method = input$correlation)) # with the chosen method of correlation
data <- data.frame(1 - cor(data, method = "spearman")) # with the chosen method of correlation
heatmaply( #heatmap
data,
hclust_method = "complete",
labRow = rownames(data),
labCol = colnames(data),
colors = rev(RdYlGn(500))
)
data <- data.frame(fread(file.choose()), row.names = 1)
data <- data.frame(1 - cor(data, method = "pearson")) # with the chosen method of correlation
heatmaply( #heatmap
data,
hclust_method = "complete",
labRow = rownames(data),
labCol = colnames(data),
colors = rev(RdYlGn(500))
)
runApp('Desktop/RNApp/App')
?cor()
?cor()
cor()
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
shiny::runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
shiny::runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
shiny::runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
data <- data.frame(fread(file.choose()), row.names = 1)
shiny::runApp('Desktop/RNApp/App')
shiny::runApp('Desktop/RNApp/App')
runApp()
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
shiny::runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp()
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
shiny::runApp('Desktop/RNApp/App')
runApp()
runApp('Desktop/RNApp/App')
runApp()
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
?tipy
?tipify
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
shiny::runApp()
updateR()
update
update.packages()
update.packages(all)
shiny::runApp()
runApp()
