}
gene
A <- character(gene$pval)
A <- as.character(gene$pval)
A
B <- character()
for (x in A){
if (x < 0.000002){
append(B,1)
}else{
append(B,0)
}
}
B
B <- list()
for (x in A){
if (x < 0.000002){
append(B,1)
}else{
append(B,0)
}
}
B <- data.frame()
for (x in A){
if (x < 0.000002){
B[x,] = 1
}else{
B[x,] = 0
}
}
B
B <- data.frame()
for (x in A){
if (x < 0.000002){
B[,x] = 1
}else{
B[,x] = 0
}
}
class(A)
B <- character(length = A)
B <- character(length = length(A))
for (x in A){
if (x < 0.000002){
B[x] = 1
}else{
B[x] = 0
}
}
B <- character(length = length(A))
for (x in A){
if (x < 0.000002){
B = 1
}else{
B = 0
}
}
A <- as.character(gene$pval)
B <- character(length = length(A))
A <- as.numeric(gene$pval)
?list
B <- list()
class(A)
B <- rep(0,length(A))
for (x in A){
for (x in B){
if (x < 0.000002){
B[x] = 1
}else{
B[x] = 0
}
}
}
for (x in A){
for (y in B){
if (x < 0.000002){
B[y] = 1
}else{
B[y] = 0
}
}
}
B
B <- as.numeric(rep(0,length(A)))
for (x in A){
for (y in B){
if (x < 0.000002){
B[y] = 1
}else{
B[y] = 0
}
}
}
B
B[2]
A <- list(as.numeric(gene$pval))
A <- as.list(as.numeric(gene$pval))
B <- as.list(as.numeric(rep(0,length(A))))
for (x in A){
for (y in B){
if (x < 0.000002){
B[y] = 1
}else{
B[y] = 0
}}
}
A
B
for (x in A){
for (y in B){
if (x > 0.000002){
B[y] = 1
}else{
B[y] = 0
}}
}
B
for (x in A){
for (y in B){
if (x > 0.000000001){
B[y] = 1
}else{
B[y] = 0
}}
}
B
for (y in B){
for (x in A){
if (x > 0.000000001){
B[y] = 1
}else{
B[y] = 0
}}
}
B
A <- as.vector(as.numeric(gene$pval))
B <- as.vector(as.numeric(rep(0,length(A))))
for (y in B){
for (x in A){
if (x > 0.000000001){
B[y] = 1
}else{
B[y] = 0
}}
}
for (x in A){
if (x > 0.000000001){
B[x] = 1
}else{
B[x] = 0
}
x <- x+1
}
for (x in A){
if (x > 0.000000001){
B[x] = 1
}else{
B[x] = 0
}
}
for (x in A){
if (x < 0.0000002){
B[x] = 1
}else{
B[x] = 0
}
}
B
B <- as.vector(as.numeric(rep(1,length(A))))
A <- as.vector(as.character(rownames(gene)))
B <- as.vector(as.numeric(rep(1,length(A))))
all.genes <- B
int.genes <- factor(all.genes)
names(int.genes) = A
int.genes
C <- as.vector(as.character(c("blabla", "blibli")))
D <- as.vector(as.numeric(rep(0,length(C))))
E <- as.vector(c(A,C))
F <- as.vector(c(B,D))
G <- as.vector(c(B,D))
all.genes <- G
int.genes <- factor(all.genes)
names(int.genes) = E
int.genes
library(topGO)
selection <- function(allScore){ return(allScore < 0.001)} # function that returns TRUE/FALSE for p-values<0.05
allGO2genes <- annFUN.org(whichOnto="BP", feasibleGenes=NULL, mapping="org.Dm.eg.db", ID="symbol")
GOdata <- new("topGOdata",
ontology="BP",
allGenes=int.genes,
annot=annFUN.GO2genes,
GO2genes=allGO2genes,
geneSel=selection,
nodeSize=10)
results.ks <- runTest(GOdata, algorithm="classic", statistic="ks")
goEnrichment <- GenTable(GOdata, KS=results.ks, orderBy="KS", topNodes=20)
goEnrichment <- goEnrichment[goEnrichment$KS<0.05,]
goEnrichment <- goEnrichment[,c("GO.ID","Term","KS")]
goEnrichment$Term <- gsub(" [a-z]*\\.\\.\\.$", "", goEnrichment$Term)
goEnrichment$Term <- gsub("\\.\\.\\.$", "", goEnrichment$Term)
goEnrichment$Term <- paste(goEnrichment$GO.ID, goEnrichment$Term, sep=", ")
goEnrichment$Term <- factor(goEnrichment$Term, levels=rev(goEnrichment$Term))
goEnrichment$KS <- as.numeric(goEnrichment$KS)
require(ggplot2)
ggplot(goEnrichment, aes(x=Term, y=-log10(KS))) +
stat_summary(geom = "bar", fun.y = mean, position = "dodge") +
xlab("Biological process") +
ylab("Enrichment") +
ggtitle("Title") +
scale_y_continuous(breaks = round(seq(0, max(-log10(goEnrichment$KS)), by = 2), 1)) +
theme_bw(base_size=24) +
theme(
legend.position='none',
legend.background=element_rect(),
plot.title=element_text(angle=0, size=24, face="bold", vjust=1),
axis.text.x=element_text(angle=0, size=18, face="bold", hjust=1.10),
axis.text.y=element_text(angle=0, size=18, face="bold", vjust=0.5),
axis.title=element_text(size=24, face="bold"),
legend.key=element_blank(),     #removes the border
legend.key.size=unit(1, "cm"),      #Sets overall area/size of the legend
legend.text=element_text(size=18),  #Text size
title=element_text(size=18)) +
guides(colour=guide_legend(override.aes=list(size=2.5))) +
coord_flip()
library(topGO)
selection <- function(allScore){ return(allScore < 0.001)} # function that returns TRUE/FALSE for p-values<0.05
allGO2genes <- annFUN.org(whichOnto="BP", feasibleGenes=NULL, mapping="org.Dm.eg.db", ID="symbol")
GOdata <- new("topGOdata",
ontology="MF",
allGenes=int.genes,
annot=annFUN.GO2genes,
GO2genes=allGO2genes,
geneSel=selection,
nodeSize=10)
results.ks <- runTest(GOdata, algorithm="classic", statistic="ks")
goEnrichment <- GenTable(GOdata, KS=results.ks, orderBy="KS", topNodes=20)
goEnrichment <- goEnrichment[goEnrichment$KS<0.05,]
goEnrichment <- goEnrichment[,c("GO.ID","Term","KS")]
goEnrichment$Term <- gsub(" [a-z]*\\.\\.\\.$", "", goEnrichment$Term)
goEnrichment$Term <- gsub("\\.\\.\\.$", "", goEnrichment$Term)
goEnrichment$Term <- paste(goEnrichment$GO.ID, goEnrichment$Term, sep=", ")
goEnrichment$Term <- factor(goEnrichment$Term, levels=rev(goEnrichment$Term))
goEnrichment$KS <- as.numeric(goEnrichment$KS)
require(ggplot2)
ggplot(goEnrichment, aes(x=Term, y=-log10(KS))) +
stat_summary(geom = "bar", fun.y = mean, position = "dodge") +
xlab("MF") +
ylab("Enrichment") +
ggtitle("Title") +
scale_y_continuous(breaks = round(seq(0, max(-log10(goEnrichment$KS)), by = 2), 1)) +
theme_bw(base_size=24) +
theme(
legend.position='none',
legend.background=element_rect(),
plot.title=element_text(angle=0, size=24, face="bold", vjust=1),
axis.text.x=element_text(angle=0, size=18, face="bold", hjust=1.10),
axis.text.y=element_text(angle=0, size=18, face="bold", vjust=0.5),
axis.title=element_text(size=24, face="bold"),
legend.key=element_blank(),     #removes the border
legend.key.size=unit(1, "cm"),      #Sets overall area/size of the legend
legend.text=element_text(size=18),  #Text size
title=element_text(size=18)) +
guides(colour=guide_legend(override.aes=list(size=2.5))) +
coord_flip()
library(topGO)
selection <- function(allScore){ return(allScore < 0.001)} # function that returns TRUE/FALSE for p-values<0.05
allGO2genes <- annFUN.org(whichOnto="BP", feasibleGenes=NULL, mapping="org.Dm.eg.db", ID="symbol")
GOdata <- new("topGOdata",
ontology="CC",
allGenes=int.genes,
annot=annFUN.GO2genes,
GO2genes=allGO2genes,
geneSel=selection,
nodeSize=10)
library(topGO)
selection <- function(allScore){ return(allScore < 0.001)} # function that returns TRUE/FALSE for p-values<0.05
allGO2genes <- annFUN.org(whichOnto="MF", feasibleGenes=NULL, mapping="org.Dm.eg.db", ID="symbol")
GOdata <- new("topGOdata",
ontology="MF",
allGenes=int.genes,
annot=annFUN.GO2genes,
GO2genes=allGO2genes,
geneSel=selection,
nodeSize=10)
results.ks <- runTest(GOdata, algorithm="classic", statistic="ks")
goEnrichment <- GenTable(GOdata, KS=results.ks, orderBy="KS", topNodes=20)
goEnrichment <- goEnrichment[goEnrichment$KS<0.05,]
goEnrichment <- goEnrichment[,c("GO.ID","Term","KS")]
goEnrichment$Term <- gsub(" [a-z]*\\.\\.\\.$", "", goEnrichment$Term)
goEnrichment$Term <- gsub("\\.\\.\\.$", "", goEnrichment$Term)
goEnrichment$Term <- paste(goEnrichment$GO.ID, goEnrichment$Term, sep=", ")
goEnrichment$Term <- factor(goEnrichment$Term, levels=rev(goEnrichment$Term))
goEnrichment$KS <- as.numeric(goEnrichment$KS)
require(ggplot2)
ggplot(goEnrichment, aes(x=Term, y=-log10(KS))) +
stat_summary(geom = "bar", fun.y = mean, position = "dodge") +
xlab("MF") +
ylab("Enrichment") +
ggtitle("Title") +
scale_y_continuous(breaks = round(seq(0, max(-log10(goEnrichment$KS)), by = 2), 1)) +
theme_bw(base_size=24) +
theme(
legend.position='none',
legend.background=element_rect(),
plot.title=element_text(angle=0, size=24, face="bold", vjust=1),
axis.text.x=element_text(angle=0, size=18, face="bold", hjust=1.10),
axis.text.y=element_text(angle=0, size=18, face="bold", vjust=0.5),
axis.title=element_text(size=24, face="bold"),
legend.key=element_blank(),     #removes the border
legend.key.size=unit(1, "cm"),      #Sets overall area/size of the legend
legend.text=element_text(size=18),  #Text size
title=element_text(size=18)) +
guides(colour=guide_legend(override.aes=list(size=2.5))) +
coord_flip()
library(topGO)
selection <- function(allScore){ return(allScore < 0.001)} # function that returns TRUE/FALSE for p-values<0.05
allGO2genes <- annFUN.org(whichOnto="CC", feasibleGenes=NULL, mapping="org.Dm.eg.db", ID="symbol")
GOdata <- new("topGOdata",
ontology="CC",
allGenes=int.genes,
annot=annFUN.GO2genes,
GO2genes=allGO2genes,
geneSel=selection,
nodeSize=10)
results.ks <- runTest(GOdata, algorithm="classic", statistic="ks")
goEnrichment <- GenTable(GOdata, KS=results.ks, orderBy="KS", topNodes=20)
goEnrichment <- goEnrichment[goEnrichment$KS<0.05,]
goEnrichment <- goEnrichment[,c("GO.ID","Term","KS")]
goEnrichment$Term <- gsub(" [a-z]*\\.\\.\\.$", "", goEnrichment$Term)
goEnrichment$Term <- gsub("\\.\\.\\.$", "", goEnrichment$Term)
goEnrichment$Term <- paste(goEnrichment$GO.ID, goEnrichment$Term, sep=", ")
goEnrichment$Term <- factor(goEnrichment$Term, levels=rev(goEnrichment$Term))
goEnrichment$KS <- as.numeric(goEnrichment$KS)
require(ggplot2)
ggplot(goEnrichment, aes(x=Term, y=-log10(KS))) +
stat_summary(geom = "bar", fun.y = mean, position = "dodge") +
xlab("MF") +
ylab("Enrichment") +
ggtitle("Title") +
scale_y_continuous(breaks = round(seq(0, max(-log10(goEnrichment$KS)), by = 2), 1)) +
theme_bw(base_size=24) +
theme(
legend.position='none',
legend.background=element_rect(),
plot.title=element_text(angle=0, size=24, face="bold", vjust=1),
axis.text.x=element_text(angle=0, size=18, face="bold", hjust=1.10),
axis.text.y=element_text(angle=0, size=18, face="bold", vjust=0.5),
axis.title=element_text(size=24, face="bold"),
legend.key=element_blank(),     #removes the border
legend.key.size=unit(1, "cm"),      #Sets overall area/size of the legend
legend.text=element_text(size=18),  #Text size
title=element_text(size=18)) +
guides(colour=guide_legend(override.aes=list(size=2.5))) +
coord_flip()
genes <- as.data.frame(read.csv(file.choose(), header = T, sep = ";"))
gene <- data.frame(genes$p.val, row.names = genes$gene_id)
A <- as.vector(as.character(rownames(gene)))
B <- as.vector(as.numeric(rep(1,length(A))))
C <- as.vector(as.character(c("blabla", "blibli")))
D <- as.vector(as.numeric(rep(0,length(C))))
E <- as.vector(c(A,C))
G <- as.vector(c(B,D))
all.genes <- G
int.genes <- factor(all.genes)
names(int.genes) = E
library(topGO)
selection <- function(allScore){ return(allScore < 0.001)} # function that returns TRUE/FALSE for p-values<0.05
allGO2genes <- annFUN.org(whichOnto="BP", feasibleGenes=NULL, mapping="org.Dm.eg.db", ID="symbol")
GOdata <- new("topGOdata",
ontology="BP",
allGenes=int.genes,
annot=annFUN.GO2genes,
GO2genes=allGO2genes,
geneSel=selection,
nodeSize=10)
results.ks <- runTest(GOdata, algorithm="classic", statistic="ks")
goEnrichment <- GenTable(GOdata, KS=results.ks, orderBy="KS", topNodes=20)
goEnrichment <- goEnrichment[goEnrichment$KS<0.05,]
goEnrichment <- goEnrichment[,c("GO.ID","Term","KS")]
goEnrichment$Term <- gsub(" [a-z]*\\.\\.\\.$", "", goEnrichment$Term)
goEnrichment$Term <- gsub("\\.\\.\\.$", "", goEnrichment$Term)
goEnrichment$Term <- paste(goEnrichment$GO.ID, goEnrichment$Term, sep=", ")
goEnrichment$Term <- factor(goEnrichment$Term, levels=rev(goEnrichment$Term))
goEnrichment$KS <- as.numeric(goEnrichment$KS)
require(ggplot2)
ggplot(goEnrichment, aes(x=Term, y=-log10(KS))) +
stat_summary(geom = "bar", fun.y = mean, position = "dodge") +
xlab("BP") +
ylab("Enrichment") +
ggtitle("Title") +
scale_y_continuous(breaks = round(seq(0, max(-log10(goEnrichment$KS)), by = 2), 1)) +
theme_bw(base_size=24) +
theme(
legend.position='none',
legend.background=element_rect(),
plot.title=element_text(angle=0, size=24, face="bold", vjust=1),
axis.text.x=element_text(angle=0, size=18, face="bold", hjust=1.10),
axis.text.y=element_text(angle=0, size=18, face="bold", vjust=0.5),
axis.title=element_text(size=24, face="bold"),
legend.key=element_blank(),     #removes the border
legend.key.size=unit(1, "cm"),      #Sets overall area/size of the legend
legend.text=element_text(size=18),  #Text size
title=element_text(size=18)) +
guides(colour=guide_legend(override.aes=list(size=2.5))) +
coord_flip()
library("biomaRt")
?biomaRt::useMart()
?biomaRt::useEnsembl()
listEnsembl()
library("biomaRt")
#collect gene names from biomart
mart <- biomaRt::useEnsembl(biomart = "ensembl")
# Get ensembl gene ids and GO terms
GTOGO <- biomaRt::getBM(attributes = c( "ensembl_gene_id",
"go_id"), mart = mart)
listDatasets(mart)
mart = useEnsembl('ENSEMBL_MART_ENSEMBL')
listDatasets(mart)
#collect gene names from biomart
mart <- biomaRt::useEnsembl(biomart = "ensembl",
dataset = "dmelanogaster_gene_ensembl")
# Get ensembl gene ids and GO terms
GTOGO <- biomaRt::getBM(attributes = c( "ensembl_gene_id",
"go_id"), mart = mart)
#examine result
head (GTOGO)
#Remove blank entries
GTOGO <- GTOGO[GTOGO$go_id != '',]
# convert from table format to list format
geneID2GO <- by(GTOGO$go_id,
GTOGO$ensembl_gene_id,
function(x) as.character(x))
#examine result
head (geneID2GO)
library(topGO)
selection <- function(allScore){ return(allScore < 0.001)} # function that returns TRUE/FALSE for p-values<0.05
allGO2genes <- annFUN.org(whichOnto="BP", feasibleGenes=NULL, mapping="org.Dm.eg.db", ID="symbol")
GOdata <- new("topGOdata",
ontology="BP",
allGenes=int.genes,
annot=annFUN.GO2genes,
GO2genes=allGO2genes,
geneSel=selection,
nodeSize=10)
results.ks <- runTest(GOdata, algorithm="classic", statistic="ks")
goEnrichment <- GenTable(GOdata, KS=results.ks, orderBy="KS", topNodes=20)
goEnrichment <- goEnrichment[goEnrichment$KS<0.05,]
goEnrichment <- goEnrichment[,c("GO.ID","Term","KS")]
goEnrichment$Term <- gsub(" [a-z]*\\.\\.\\.$", "", goEnrichment$Term)
goEnrichment$Term <- gsub("\\.\\.\\.$", "", goEnrichment$Term)
goEnrichment$Term <- paste(goEnrichment$GO.ID, goEnrichment$Term, sep=", ")
goEnrichment$Term <- factor(goEnrichment$Term, levels=rev(goEnrichment$Term))
goEnrichment$KS <- as.numeric(goEnrichment$KS)
require(ggplot2)
ggplot(goEnrichment, aes(x=Term, y=-log10(KS))) +
stat_summary(geom = "bar", fun.y = mean, position = "dodge") +
xlab("BP") +
ylab("Enrichment") +
ggtitle("Title") +
scale_y_continuous(breaks = round(seq(0, max(-log10(goEnrichment$KS)), by = 2), 1)) +
theme_bw(base_size=24) +
theme(
legend.position='none',
legend.background=element_rect(),
plot.title=element_text(angle=0, size=24, face="bold", vjust=1),
axis.text.x=element_text(angle=0, size=18, face="bold", hjust=1.10),
axis.text.y=element_text(angle=0, size=18, face="bold", vjust=0.5),
axis.title=element_text(size=24, face="bold"),
legend.key=element_blank(),     #removes the border
legend.key.size=unit(1, "cm"),      #Sets overall area/size of the legend
legend.text=element_text(size=18),  #Text size
title=element_text(size=18)) +
guides(colour=guide_legend(override.aes=list(size=2.5))) +
coord_flip()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Desktop/EnrichTool/App')
runApp('~/Desktop/EnrichTool/App')
runApp('~/Desktop/EnrichTool/App')
runApp('~/Desktop/EnrichTool/App')
runApp('~/Desktop/EnrichTool/App')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
