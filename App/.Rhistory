y = as.matrix(y)
y
is.matrix(y)
clust_res = timeclust(y,  algo = 'cm', k = 4, standardize = TRUE)
str(y)
y
clust_res = timeclust(y,  algo = 'cm', k = 4, standardize = TRUE)
library(TCseq)
y=read.csv(file.choose(), header = T)
is.data.frame(y)
data.matrix(y)
y = data.matrix(y)
y = matrix(y)
clust_res = timeclust(y,  algo = 'cm', k = 4, standardize = TRUE)
y=read.csv(file.choose(), header = T)
y = data.matrix(y)
clust_res = timeclust(y,  algo = 'cm', k = 4, standardize = TRUE)
p <- timeclustplot(clust_res, cols =2)
dim(y)
y
sort(y)
y
y = matrix(y,nrows = 10000, dimnames = list(paste0('peak',1:10000,1:6)))
y = matrix(y, dimnames = list(paste0('peak',1:10000,1:6)))
y = matrix(y, dimnames = list(paste0('peak',1:10001,1:6)))
y = matrix(y, dimnames = list(paste0('peak',0:10001,1:6)))
y = matrix(y, dimnames = list(paste0('peak',0:10000,1:6)))
clust_res = timeclust(y,  algo = 'cm', k = 4, standardize = TRUE)
timeclustplot(clust_res,cols = 2)
x <- matrix(sample(500, 1600, replace = TRUE), nrow = 10000,
dimnames = list(paste0('peak', 1:10000), 1:8))
clust_res <- timeclust(x, algo = 'cm', k = 4, standardize = TRUE)
p <- timeclustplot(clust_res, cols =2)
x <- matrix(sample(500, 1600, replace = TRUE), nrow = 10000,
dimnames = list(paste0('peak', 1:10000), 1:8))
x <- matrix(sample(500, 1600, replace = TRUE), nrow = 200,
dimnames = list(paste0('peak', 1:200), 1:8))
clust_res <- timeclust(x, algo = 'cm', k = 2, standardize = TRUE)
p <- timeclustplot(clust_res, cols =2)
clust_res <- timeclust(x, algo = 'cm', k = 10, standardize = TRUE)
p <- timeclustplot(clust_res, cols =2)
clust_res <- timeclust(x, algo = 'cm', k = 5, standardize = TRUE)
p <- timeclustplot(clust_res, cols =2)
x <- matrix(sample(500, 1600, replace = TRUE), nrow = 200,
dimnames = list(paste0('peak', 1:200), 1:8))
clust_res <- timeclust(x, algo = 'cm', k = 5, standardize = TRUE)
p <- timeclustplot(clust_res, cols =2)
clust_res <- timeclust(x, algo = 'cm', k =4 , standardize = TRUE)
p <- timeclustplot(clust_res, cols =2)
x <- matrix(sample(500, 1600, replace = TRUE), nrow = 200,
dimnames = list(paste0('peak', 1:200), 1:4))
clust_res <- timeclust(x, algo = 'cm', k =4 , standardize = TRUE)
p <- timeclustplot(clust_res, cols =2)
x
x <- matrix(sample(500, 1600, replace = TRUE), nrow = 200,
dimnames = list(paste0('peak', 1:200), 1:4))
x <- matrix(sample(500, 800, replace = TRUE), nrow = 200,
dimnames = list(paste0('peak', 1:200), 1:4))
clust_res <- timeclust(x, algo = 'cm', k =4 , standardize = TRUE)
p <- timeclustplot(clust_res, cols =2)
shiny::runApp()
shiny::runApp()
runApp()
?data.frame
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df <- as.data.frame(df)
runApp()
runApp()
runApp()
?getResult
shiny::runApp('~/Desktop/RNApp_last/App')
shiny::runApp()
runApp()
runApp()
runApp()
runApp('~/Desktop/RNApp_last/App')
runApp()
runApp('~/Desktop/RNApp_last/App')
runApp('~/Desktop/RNApp_last/App')
?useSweetAlert
?useSweetAlert()
?useSweetAlert
?observeEvent
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?heatmaply
runApp()
rsconnect::setAccountInfo(name='rnapp',
token='F166489297CA02CF65DC0C5BA1A6DB38',
secret='0dOV3jSxmF6BhtQts9AP/yzeOoA1hztpRSubx2XQ')
library(rsconnect)
rsconnect::setAccountInfo(name='rnapp',
token='F166489297CA02CF65DC0C5BA1A6DB38',
secret='0dOV3jSxmF6BhtQts9AP/yzeOoA1hztpRSubx2XQ')
deployApp()
deployApp(RNApp)
rsconnect::setAccountInfo(name='rnapp',
token='F166489297CA02CF65DC0C5BA1A6DB38',
secret='0dOV3jSxmF6BhtQts9AP/yzeOoA1hztpRSubx2XQ')
deployApp()
deployApp()
rsconnect::setAccountInfo(name='rnapp',
token='F166489297CA02CF65DC0C5BA1A6DB38',
secret='0dOV3jSxmF6BhtQts9AP/yzeOoA1hztpRSubx2XQ')
deployApp()
rsconnect::setAccountInfo(name='rnapp',
token='F166489297CA02CF65DC0C5BA1A6DB38',
secret='0dOV3jSxmF6BhtQts9AP/yzeOoA1hztpRSubx2XQ')
deployApp()
deployApp('RNApp')
deployApp('RNApp_last')
deployApp('RNApp_last')
deployApp('RNApp')
runApp('~/Desktop/RNApp_last/RNApp')
rsconnect::setAccountInfo(name='rnapp',
token='F166489297CA02CF65DC0C5BA1A6DB38',
secret='0dOV3jSxmF6BhtQts9AP/yzeOoA1hztpRSubx2XQ')
deployApp()
deployApp(rnapp)
deployApp('rnapp')
deployApp()
setwd("~/Desktop/DATA/RNApp/App")
deployApp()
deployApp()
shiny::runApp()
runApp()
runApp()
runApp()
dend <- hclust(dist(x, method = 'euclidean'), method = 'complete')
cut <- cutree(dend, k = 3)
as.data.frame(cut)
cut
x <- as.data.frame(read.csv(file.choose(), header = T))
x <- data.frame(x[,-1], row.names=x[,1])
x <- as.matrix(x)
x <-  log1p(x)
x <- heatmaply::normalize(x)
dend <- hclust(dist(x, method = 'euclidean'), method = 'complete')
cut <- cutree(dend, k = 3)
cut
?as.data.frame
as.data.frame(cut,row.names = x[1])
cut
cute <- as.data.frame(cut,row.names = x[1])
cute
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?cutree
?heatmaply
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?rowSums
runApp()
runApp('~/Desktop/RNApp_fanny/App')
runApp('~/Desktop/RNApp_fanny/App')
heatmaply()
?hheatmaply
?heatmaply
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Desktop/RNApp_last/App')
runApp('~/Desktop/RNApp_last/App')
runApp()
runApp()
runApp()
runApp()
runApp()
?formatRound
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/Desktop/RNApp/App/server-data-import.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?plotlyOutput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages('metabolics')
BiocManager::install('metabolics')
BiocManager::install('metabolomics')
install
install.packages('metabolomics')
runApp()
install.packages("remotes")
runApp()
remotes::install_github("xinchoubiology/Rcppsva")
runApp()
runApp()
runApp()
?hclust
?dist
?pheatmap
install.packages('pheatmap')
?pheatmap
library(pheatmap)
runApp()
plotly_build()
?plotly_build
?pheatmap
?heatmap
?heatmap.2
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install_github("nik01010/dashboardthemes")
remotes::install_github("nik01010/dashboardthemes")
install.packages('remote')
remote::install_github("nik01010/dashboardthemes")
install.packages('remotes')
remotes::install_github("nik01010/dashboardthemes")
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?cbind
shiny::runApp()
runApp()
runApp()
runApp()
?write.csv
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
downresultTable,
filter = "bottom",
extensions = 'Buttons',
option = list(
paging = TRUE,
searching = TRUE,
fixedColumns = TRUE,
autoWidth = TRUE,
ordering = TRUE,
dom = 'Bfrtip',
buttons = list(list(
extend = 'collection',
buttons = list(extend='csv',
filename = "downregulated_genes"),
text = 'Download')),
scrollX = TRUE,
pageLength = 10,
searchHighlight = TRUE,
orderClasses = TRUE
),
class = "display"),
if (!is.na(sum(resultTable()$m.value))) {
t   %>% formatStyle("gene_id", "m.value",
color = styleInterval(input$CutFC,
c(
input$downColor, "black", input$upColor
))) %>% formatStyle("gene_id",
"p.value",
fontWeight = styleInterval(fdrCut, c("bold", "normal")))
} else {
t
}
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?gmtCategory
install.packages('RSQLite')
install.packages("RSQLite")
install.packages("reshape2")
install.packages("visNetwork")
install.packages("gridExtra")
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
