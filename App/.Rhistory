install.package('GenomeInfoDbData')
rsconnect::deployApp('Desktop/RNApp_backup/RNApp/')
library(rsconnect)
rsconnect::deployApp('Desktop/RNApp_backup/RNApp/')
install.packages('TCA')
install.packages('TCSeq')
install.packages('TCseq')
data("genomicIntervals") # columns : chr, start, end, id
install.packages("TCseq")
install.packages("TCseq")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp('Desktop/RNApp_backup/RNApp/')
rsconnect::deployApp('Desktop/RNApp_backup/RNApp/')
library(rsconnect)
rsconnect::deployApp('Desktop/RNApp_backup/RNApp/')
rsconnect::deployApp('margaux/Desktop/RNApp_backup/RNApp/')
rsconnect::setAccountInfo(name='rnapp',
token='F166489297CA02CF65DC0C5BA1A6DB38',
secret='0dOV3jSxmF6BhtQts9AP/yzeOoA1hztpRSubx2XQ')
rsconnect::deployApp('Desktop/RNApp_backup/RNApp/')
rsconnect::setAccountInfo(name='rnapp',
token='F166489297CA02CF65DC0C5BA1A6DB38',
secret='0dOV3jSxmF6BhtQts9AP/yzeOoA1hztpRSubx2XQ')
rsconnect::deployApp('margaux/Desktop/RNApp_backup/RNApp/')
rsconnect::deployApp('Desktop/RNApp_backup/RNApp/')
rsconnect::deployApp('Desktop/RNApp_backup/RNApp')
rsconnect::deployApp('Desktop/RNApp_backup/RNApp/')
shiny::runApp()
deployApp()
library(rsconnect)
deployApp()
install.packages('XVector')
install.packages("XVector")
BiocManager::install("XVector")
deployApp()
library(rsconnect)
deployApp()
setRepositories()
library(rsconnect)
deployApp()
deployApp()
setRepositories()
deployApp()
setRepositories()
deployApp()
setRepositories()
deployApp()
library(rsconnect)
deployApp()
setRepositories()
deployApp()
install.packages('apt-utils')
setRepositories()
deployApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(rsconnect)
rsconnect::setAccountInfo(name='rnapp',
token='F166489297CA02CF65DC0C5BA1A6DB38',
secret='0dOV3jSxmF6BhtQts9AP/yzeOoA1hztpRSubx2XQ')
deployApp()
runApp()
runApp()
runApp()
library(rsconnect)
rsconnect::setAccountInfo(name='rnapp',
token='F166489297CA02CF65DC0C5BA1A6DB38',
secret='0dOV3jSxmF6BhtQts9AP/yzeOoA1hztpRSubx2XQ')
deployApp()
shiny::runApp()
runApp()
runApp()
library(rsconnect)
rsconnect::setAccountInfo(name='rnapp',
token='F166489297CA02CF65DC0C5BA1A6DB38',
secret='0dOV3jSxmF6BhtQts9AP/yzeOoA1hztpRSubx2XQ')
deployApp()
library(rsconnect)
rsconnect::setAccountInfo(name='rnapp',
token='873FFA7D5E72C882881506F9A4AE94BD',
secret='2vK/jPPvn983smb1wnPQ8znA6nse/EL0c4cmBaib')
rsconnect::setAccountInfo(name='rnapp2',
token='873FFA7D5E72C882881506F9A4AE94BD',
secret='2vK/jPPvn983smb1wnPQ8znA6nse/EL0c4cmBaib')
rsconnect::setAccountInfo(name='rnapp',
token='873FFA7D5E72C882881506F9A4AE94BD',
secret='2vK/jPPvn983smb1wnPQ8znA6nse/EL0c4cmBaib')
deployApp()
setRepositories()
deployApp()
rsconnect::setAccountInfo(name='rnapp',
token='F166489297CA02CF65DC0C5BA1A6DB38',
secret='0dOV3jSxmF6BhtQts9AP/yzeOoA1hztpRSubx2XQ')
deployApp()
install.packages('highr', repos = 'http://rforge.net', type = 'source')
setRepositories()
deployApp()
deployApp()
setRepositories()
deployApp()
library(rsconnect)
rsconnect::setAccountInfo(name='rnapp2',
token='CB40244F583485B241E7EC23D0C76753',
secret='kUxu5t+ojdylbvt2dznMTJX77LkdKiKGxo535dBa')
rsconnect::deployApp()
rsconnect::setAccountInfo(name='rnapp2',
token='CB40244F583485B241E7EC23D0C76753',
secret='kUxu5t+ojdylbvt2dznMTJX77LkdKiKGxo535dBa')
deployApp()
library(rsconnect)
rsconnect::setAccountInfo(name='rnapp2',
token='CB40244F583485B241E7EC23D0C76753',
secret='kUxu5t+ojdylbvt2dznMTJX77LkdKiKGxo535dBa')
rsconnect::deployApp()
rsconnect::deployApp(name='rnapp2',token='CB40244F583485B241E7EC23D0C76753',
+ 			  secret='kUxu5t+ojdylbvt2dznMTJX77LkdKiKGxo535dBa')
rsconnect::setAccountInfo(name='rnapp2',
token='CB40244F583485B241E7EC23D0C76753',
secret='kUxu5t+ojdylbvt2dznMTJX77LkdKiKGxo535dBa')
rsconnect::deployApp()
deployApp()
rsconnect::setAccountInfo(name='rnapp',
token='F166489297CA02CF65DC0C5BA1A6DB38',
secret='0dOV3jSxmF6BhtQts9AP/yzeOoA1hztpRSubx2XQ')
deployApp()
library(rsconnect)
rsconnect::setAccountInfo(name='rnapp',
token='F166489297CA02CF65DC0C5BA1A6DB38',
secret='0dOV3jSxmF6BhtQts9AP/yzeOoA1hztpRSubx2XQ')
deployApp()
uninstall.packages('rsconnect')
install.packages('uninstall.packages')
remove.packages('rsconnect')
install.packages('rsconnect')
library(rsconnect)
rsconnect::setAccountInfo(name='rnapp',
token='F166489297CA02CF65DC0C5BA1A6DB38',
secret='0dOV3jSxmF6BhtQts9AP/yzeOoA1hztpRSubx2XQ')
deployApp()
deployApp(account = rnapp)
deployApp(account = 'rnapp')
setRepositories()
deployApp(account = 'rnapp')
install.packages('libapparmor-dev')
BiocManager::install('libapparmor-dev')
deployApp(account = 'rnapp')
install.packages('installr')
BiocManager::install('installr')
library(rsconnect)
deployApp()
warnings()
install.packages('highr')
deployApp()
setRepositories()
deployApp()
update.packages('Bioconductor')
deployApp()
setRepositories()
deployApp()
install.packages('limma')
deployApp()
install.packages('fetching_png')
install.packages('fetching png')
BiocManager::install('fetching png')
install.packages('png')
deployApp()
install.packages('highr')
deployApp()
sessionInfo()
install.packages(' MSnbase')
BiocManager::install('MSnbase')
deployApp()
MSnbase
rsconnect::appDependencies()
setRepositories()
deployApp()
library(rsconnect)
deployApp()
setRepositories()
deployApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
install.packages('shinyjs')
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?reactive
runApp()
runApp()
resultTableInHeatmap
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(devtools)
install_github("nik01010/dashboardthemes")
runApp()
install.packages(shinyDashboardThemes)
install.packages("dashboardthemes")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
BiocManager::install('TCseq')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?switch
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
print (p[[3]]) # plot cluster 3
library(TCseq)
x <- matrix(sample(500, 1600, replace = TRUE), nrow = 200,
dimnames = list(paste0('peak', 1:200), 1:8))
clust_res <- timeclust(x, algo = 'cm', k = 4, standardize = TRUE)
p <- timeclustplot(clust_res, cols =2)
# to plot a individual cluster
print (p[[2]]) # plot cluster 2
print (p[[3]]) # plot cluster 3
print (p[[2]]) # plot cluster 2
x
y = read.csv(file.choose(),header = T)
y
y = read.csv(file.choose(),header = T)
y
clust_res <- timeclust(y, algo = 'cm', k = 4, standardize = TRUE)
y = as.matrix(y)
clust_res <- timeclust(y, algo = 'cm', k = 4, standardize = TRUE)
y = as.matrix(y), y
y = read.csv(file.choose(),header = T)
y = as.matrix(y);y
y = as.matrix(y);y
y = read.csv(file.choose(),header = T)
y
x
y = read.csv(matrix(file.choose()),header = T)
y
clust_res <- timeclust(y, algo = 'cm', k = 4, standardize = TRUE)
y <- matrix(y, nrow = length(y),dimnames = colnames(y))
y <- matrix(y, nrow = length(y),dimnames = list(paste0('peak',1:nrow,1:3))
clust_res <- timeclust(y, algo = 'cm', k = 4, standardize = TRUE)
y <- matrix(y, nrow = length(y),dimnames = list(paste0('peak',1:nrow,1:3)))
y <- matrix(y, nrow = length(y),dimnames = list(paste0('peak',1:10000,1:3)))
y <- matrix(y, nrow = 10000 ,dimnames = list(paste0('peak',1:10000,1:3)))
clust_res <- timeclust(y, algo = 'cm', k = 4, standardize = TRUE)
y <- matrix(y, nrow = 10000 ,dimnames = list(paste0('peak',1:10000,1:3)))
clust_res <- timeclust(y, algo = 'cm', k = 4, standardize = TRUE)
y <- matrix(y[1:], nrow = 10000 ,dimnames = list(paste0('peak',1:10000,1:3)))
y <- matrix(y[1:,], nrow = 10000 ,dimnames = list(paste0('peak',1:10000,1:3)))
y <- matrix(y[1:,:], nrow = 10000 ,dimnames = list(paste0('peak',1:10000,1:3)))
y <- matrix(y[1:;], nrow = 10000 ,dimnames = list(paste0('peak',1:10000,1:3)))
y <- matrix(y[,1:], nrow = 10000 ,dimnames = list(paste0('peak',1:10000,1:3)))
y <- matrix(y, nrow = 10000 ,dimnames = list(paste0('peak',1:10000,1:3)))
clust_res <- timeclust(y, algo = 'cm', k = 4, standardize = TRUE)
y
y = read.csv(file.choose(),header = T)
y <- matrix(y, nrow = 10000 ,dimnames = list(paste0('peak',1:10000),1:3))
y <- matrix(y, nrow = 9999 ,dimnames = list(paste0('peak',1:10000),1:3))
y <- matrix(y, nrow = 9999 ,dimnames = list(paste0('peak',1:9999),1:3))
x <- matrix(sample(500, 1600, replace = TRUE), nrow = 200,
dimnames = list(paste0('peak', 1:200), 1:8))
clust_res <- timeclust(x, algo = 'cm', k = 4, standardize = TRUE)
p <- timeclustplot(clust_res, cols =2)
# to plot a individual cluster
print (p[[4]]) # plot cluster 4
x <- matrix(sample(500, 1600, replace = TRUE), nrow = 10000,
dimnames = list(paste0('peak', 1:10000), 1:8))
clust_res <- timeclust(x, algo = 'cm', k = 4, standardize = TRUE)
p <- timeclustplot(clust_res, cols =2)
# to plot a individual cluster
print (p[[4]]) # plot cluster 4
x
?sample
y=read.csv2(file.choose(), header = T)
y <- as.matrix(y)
y
y=read.csv2(file.choose(), header = T)
y
y=read.csv(file.choose(), header = T)
y
dim(y)
is.matrix(y)
as.matrix(y)
?as.matrix
y = as.matrix(y)
y
is.matrix(y)
clust_res = timeclust(y,  algo = 'cm', k = 4, standardize = TRUE)
str(y)
y
clust_res = timeclust(y,  algo = 'cm', k = 4, standardize = TRUE)
library(TCseq)
y=read.csv(file.choose(), header = T)
is.data.frame(y)
data.matrix(y)
y = data.matrix(y)
y = matrix(y)
clust_res = timeclust(y,  algo = 'cm', k = 4, standardize = TRUE)
y=read.csv(file.choose(), header = T)
y = data.matrix(y)
clust_res = timeclust(y,  algo = 'cm', k = 4, standardize = TRUE)
p <- timeclustplot(clust_res, cols =2)
dim(y)
y
sort(y)
y
y = matrix(y,nrows = 10000, dimnames = list(paste0('peak',1:10000,1:6)))
y = matrix(y, dimnames = list(paste0('peak',1:10000,1:6)))
y = matrix(y, dimnames = list(paste0('peak',1:10001,1:6)))
y = matrix(y, dimnames = list(paste0('peak',0:10001,1:6)))
y = matrix(y, dimnames = list(paste0('peak',0:10000,1:6)))
clust_res = timeclust(y,  algo = 'cm', k = 4, standardize = TRUE)
timeclustplot(clust_res,cols = 2)
x <- matrix(sample(500, 1600, replace = TRUE), nrow = 10000,
dimnames = list(paste0('peak', 1:10000), 1:8))
clust_res <- timeclust(x, algo = 'cm', k = 4, standardize = TRUE)
p <- timeclustplot(clust_res, cols =2)
x <- matrix(sample(500, 1600, replace = TRUE), nrow = 10000,
dimnames = list(paste0('peak', 1:10000), 1:8))
x <- matrix(sample(500, 1600, replace = TRUE), nrow = 200,
dimnames = list(paste0('peak', 1:200), 1:8))
clust_res <- timeclust(x, algo = 'cm', k = 2, standardize = TRUE)
p <- timeclustplot(clust_res, cols =2)
clust_res <- timeclust(x, algo = 'cm', k = 10, standardize = TRUE)
p <- timeclustplot(clust_res, cols =2)
clust_res <- timeclust(x, algo = 'cm', k = 5, standardize = TRUE)
p <- timeclustplot(clust_res, cols =2)
x <- matrix(sample(500, 1600, replace = TRUE), nrow = 200,
dimnames = list(paste0('peak', 1:200), 1:8))
clust_res <- timeclust(x, algo = 'cm', k = 5, standardize = TRUE)
p <- timeclustplot(clust_res, cols =2)
clust_res <- timeclust(x, algo = 'cm', k =4 , standardize = TRUE)
p <- timeclustplot(clust_res, cols =2)
x <- matrix(sample(500, 1600, replace = TRUE), nrow = 200,
dimnames = list(paste0('peak', 1:200), 1:4))
clust_res <- timeclust(x, algo = 'cm', k =4 , standardize = TRUE)
p <- timeclustplot(clust_res, cols =2)
x
x <- matrix(sample(500, 1600, replace = TRUE), nrow = 200,
dimnames = list(paste0('peak', 1:200), 1:4))
x <- matrix(sample(500, 800, replace = TRUE), nrow = 200,
dimnames = list(paste0('peak', 1:200), 1:4))
clust_res <- timeclust(x, algo = 'cm', k =4 , standardize = TRUE)
p <- timeclustplot(clust_res, cols =2)
shiny::runApp()
shiny::runApp()
runApp()
?data.frame
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df <- as.data.frame(df)
runApp()
runApp()
runApp()
?getResult
shiny::runApp('~/Desktop/RNApp_last/App')
shiny::runApp()
runApp()
runApp()
runApp()
runApp('~/Desktop/RNApp_last/App')
runApp()
runApp('~/Desktop/RNApp_last/App')
runApp('~/Desktop/RNApp_last/App')
?useSweetAlert
?useSweetAlert()
?useSweetAlert
?observeEvent
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?heatmaply
runApp()
rsconnect::setAccountInfo(name='rnapp',
token='F166489297CA02CF65DC0C5BA1A6DB38',
secret='0dOV3jSxmF6BhtQts9AP/yzeOoA1hztpRSubx2XQ')
library(rsconnect)
rsconnect::setAccountInfo(name='rnapp',
token='F166489297CA02CF65DC0C5BA1A6DB38',
secret='0dOV3jSxmF6BhtQts9AP/yzeOoA1hztpRSubx2XQ')
deployApp()
deployApp(RNApp)
rsconnect::setAccountInfo(name='rnapp',
token='F166489297CA02CF65DC0C5BA1A6DB38',
secret='0dOV3jSxmF6BhtQts9AP/yzeOoA1hztpRSubx2XQ')
deployApp()
deployApp()
rsconnect::setAccountInfo(name='rnapp',
token='F166489297CA02CF65DC0C5BA1A6DB38',
secret='0dOV3jSxmF6BhtQts9AP/yzeOoA1hztpRSubx2XQ')
deployApp()
rsconnect::setAccountInfo(name='rnapp',
token='F166489297CA02CF65DC0C5BA1A6DB38',
secret='0dOV3jSxmF6BhtQts9AP/yzeOoA1hztpRSubx2XQ')
deployApp()
deployApp('RNApp')
deployApp('RNApp_last')
deployApp('RNApp_last')
deployApp('RNApp')
runApp('~/Desktop/RNApp_last/RNApp')
rsconnect::setAccountInfo(name='rnapp',
token='F166489297CA02CF65DC0C5BA1A6DB38',
secret='0dOV3jSxmF6BhtQts9AP/yzeOoA1hztpRSubx2XQ')
deployApp()
deployApp(rnapp)
deployApp('rnapp')
deployApp()
setwd("~/Desktop/DATA/RNApp/App")
deployApp()
deployApp()
